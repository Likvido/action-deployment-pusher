name: 'Deployment pusher'
description: 'Updates the deployment file in another repository, using GitHub App authentication'
inputs:
  repo-url:
    description: 'The GitHub repository URL to update'
    required: true
  environment:
    description: 'The deployment environment (e.g., staging or production)'
    required: true
  namespace:
    description: 'The Kubernetes namespace for the app'
    required: true
  app-name:
    description: 'The name of the application'
    required: true
  new-image-name:
    description: 'The new image name and tag to update in the deployment'
    required: true
  github-app-id:
    description: 'The GitHub App ID'
    required: true
  github-app-private-key:
    description: 'The GitHub App private key. Ensure to handle with care and use secrets'
    required: true
  installation-id:
    description: 'The Installation ID for the GitHub App on the target repository'
    required: true

  deployment-file:
    description: 'If you want to control which deployment file to update, you can point to the file here. This should be the path to the deployment file in the GitOps repo'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Update Deployment File
      shell: bash
      run: |
        #!/bin/bash
        set -e

        # Function to pull latest changes, rebase, and push, with retry logic and random delay
        push_with_retries() {
          local max_attempts=${1:-5}
          local attempt=1
          while true; do
            echo "Attempt $attempt of $max_attempts"
            # Fetch the latest changes from the remote and rebase
            git fetch origin main && git rebase origin/main
            if git push; then
              echo "Push successful."
              break
            else
              if [[ $attempt -lt $max_attempts ]]; then
                # Generate a random delay between 1 and 10 seconds
                local delay=$((1 + $RANDOM % 10))
                echo "Push failed, retrying in $delay seconds..."
                sleep $delay
                ((attempt++))
              else
                echo "Push failed after $max_attempts attempts, giving up."
                return 1
              fi
            fi
          done
        }

        # Function to generate JWT
        generate_jwt() {
            local app_id=$1
            local now=$(date +%s)
            local iat=$((${now} - 60))
            local exp=$((${now} + 600))
            local header='{"typ":"JWT","alg":"RS256"}'
            local payload="{\"iat\":${iat},\"exp\":${exp},\"iss\":\"${app_id}\"}"

            local signed_header=$(echo -n "${header}" | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
            local signed_payload=$(echo -n "${payload}" | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')
            local signature=$(echo -n "${signed_header}.${signed_payload}" | openssl dgst -sha256 -sign <(echo "${GITHUB_APP_PRIVATE_KEY}") | openssl base64 -e -A | tr '+/' '-_' | tr -d '=')

            echo "${signed_header}.${signed_payload}.${signature}"
        }

        # Function to fetch installation access token
        fetch_installation_token() {
            local jwt=$1
            local installation_id=$2

            echo "Fetching installation access token for installation ID: ${installation_id}"
            local token_response=$(curl -X POST -H "Authorization: Bearer ${jwt}" -H "Accept: application/vnd.github+json" "https://api.github.com/app/installations/${installation_id}/access_tokens")
            echo "Token response: ${token_response}"
            echo "${token_response}" | jq -r '.token'
        }

        # Convert GitHub App private key from base64 to PEM format
        GITHUB_APP_PRIVATE_KEY=$(echo "${{ inputs['github-app-private-key'] }}" | base64 --decode)

        # Function for cloning with retries
        clone_with_retries() {
          local repo_url=$1
          local repo_name=$2
          local max_attempts=5
          local attempt=1
          local delay=5

          # Generate JWT
          local jwt=$(generate_jwt "${{ inputs['github-app-id'] }}")
          
          while true; do
            echo "Attempt $attempt of $max_attempts: Cloning $repo_url"

            # Fetch installation access token
            INSTALLATION_TOKEN=$(fetch_installation_token "$jwt" "${{ inputs['installation-id'] }}")

            # Check if the INSTALLATION_TOKEN is empty
            if [[ -z "$INSTALLATION_TOKEN" ]]; then
              echo "Failed to obtain a valid installation token. Attempt $attempt of $max_attempts."
            else
              echo "Using installation token for clone attempt."
              echo "git clone 'https://x-access-token:${INSTALLATION_TOKEN}@${repo_url#https://}' \"$repo_name\""

              # Attempt to clone the repository
              if git clone "https://x-access-token:${INSTALLATION_TOKEN}@${repo_url#https://}" "$repo_name"; then
                echo "Clone successful."
                break
              else
                if [[ $attempt -lt $max_attempts ]]; then
                  echo "Clone failed, retrying in $delay seconds..."
                  sleep $delay
                  ((attempt++))
                  delay=$((delay * 2))  # Exponential backoff
                else
                  echo "Clone failed after $max_attempts attempts, giving up."
                  return 1
                fi
              fi
            fi
          done
        }

        # Setup git to use the installation token
        git config --global user.email "sp+deployment-pusher@likvido.com"
        git config --global user.name "Likvido Deployment Pusher"

        # Clone the repo
        REPO_URL="${{ inputs['repo-url'] }}"
        REPO_NAME=$(basename "${{ inputs['repo-url'] }}" .git)
        clone_with_retries "$REPO_URL" "$REPO_NAME"
        cd "${REPO_NAME}"

        # Check if the deployment-file input has a value
        if [[ -n "${{ inputs['deployment-file'] }}" ]]; then
          # Use the provided deployment file path
          DEPLOYMENT_FILE_PATH="${{ inputs['deployment-file'] }}"
          echo "Using provided deployment file path: $DEPLOYMENT_FILE_PATH"

          # Check if the specified deployment file exists
          if [[ ! -f "$DEPLOYMENT_FILE_PATH" ]]; then
            echo "Error: The specified deployment file does not exist in the repository."
            exit 1  # Exit with an error status
          fi
        else
          # Define the directory path
          DEPLOYMENT_DIR_PATH="${{ inputs.environment }}/apps/${{ inputs.namespace }}/${{ inputs['app-name'] }}"
          echo "The deployment path is: $DEPLOYMENT_DIR_PATH"

          # Ensure the directory exists
          mkdir -p "$DEPLOYMENT_DIR_PATH"

          # Define the file path in the target repo for the deployment and cronjob
          DEPLOYMENT_FILE_PATH="$DEPLOYMENT_DIR_PATH/deployment.yaml"
          PLACEHOLDER_FILE_PATH="$DEPLOYMENT_DIR_PATH/add-deployment-here.txt"
          CRONJOB_FILE_PATH="$DEPLOYMENT_DIR_PATH/fake-cronjob.yaml"
        fi

        if [[ -f "$DEPLOYMENT_FILE_PATH" ]]; then
          # Use yq document_index to get the index of each document and determine the count
          last_index=$(yq document_index "$DEPLOYMENT_FILE_PATH" | tail -n1)
          # Add 1 to convert the last index into the count of documents
          doc_count=$((last_index + 1))
          echo "The file contains $doc_count documents"

          # Loop through each document and update the image if the kind matches
          for ((doc_index=0; doc_index<doc_count; doc_index++)); do
            # Temporary file to hold the output
            temp_file=$(mktemp)

            kind=$(yq eval "select(document_index == $doc_index) | .kind" "$DEPLOYMENT_FILE_PATH")
            echo "Document $((doc_index + 1)) is a $kind"

            # Depending on the kind, update the image field
            if [[ "$kind" == "CronJob" ]]; then
              echo "Updating image tag for cron job to: ${{ inputs['new-image-name'] }}"
              yq eval "(select(document_index == $doc_index) | .spec.jobTemplate.spec.template.spec.containers[0].image) = \"${{ inputs['new-image-name'] }}\"" "$DEPLOYMENT_FILE_PATH" > "$temp_file"
              mv "$temp_file" "$DEPLOYMENT_FILE_PATH"
            elif [[ "$kind" == "Deployment" ]] || [[ "$kind" == "Job" ]]; then
              echo "Updating image tag for job or deployment to: ${{ inputs['new-image-name'] }}"
              yq eval "(select(document_index == $doc_index) | .spec.template.spec.containers[0].image) = \"${{ inputs['new-image-name'] }}\"" "$DEPLOYMENT_FILE_PATH" > "$temp_file"
              mv "$temp_file" "$DEPLOYMENT_FILE_PATH"
            fi
          done

          git add "$DEPLOYMENT_FILE_PATH"
        else
          # Update or create add-deployment-here.txt with the new image name
          echo "Adding placeholder file at: $PLACEHOLDER_FILE_PATH"
          echo "${{ inputs['new-image-name'] }}" > "$PLACEHOLDER_FILE_PATH"
          # Add the placeholder file
          git add "$PLACEHOLDER_FILE_PATH"
        fi

        # Check if the CRONJOB_FILE_PATH variable has been set
        if [[ -n "$CRONJOB_FILE_PATH" ]]; then
          # Then check if the fake-cronjob.yaml exists
          if [[ -f "$CRONJOB_FILE_PATH" ]]; then
            # For simplicity, we update an annotation with the new image name which will trigger ArgoCD sync.
            echo "Updating annotation in fake cron job at: $CRONJOB_FILE_PATH"
            yq e -i '.metadata.annotations."app.likvido.com/last-updated-image" = "${{ inputs['new-image-name'] }}"' "$CRONJOB_FILE_PATH"
            git add "$CRONJOB_FILE_PATH"
          fi
        fi

        # Commit and push the changes
        git commit -m "Update ${{ inputs['app-name'] }} in the ${{ inputs.environment }} environment to ${{ inputs['new-image-name'] }}"
        push_with_retries 20

        echo "Deployment file updated successfully"
